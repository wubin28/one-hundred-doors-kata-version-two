{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n...\nTime: 0.033\n\nOK (3 tests)\n\n","instructions":"100 doors in a row are all initially closed. You make\n100 passes by the doors. The first time through, you\nvisit every door and toggle the door (if the door is\nclosed, you open it; if it is open, you close it).\nThe second time you only visit every 2nd door (door\n#2, #4, #6, ...). The third time, every 3rd door\n(door #3, #6, #9, ...), etc, until you only visit\nthe 100th door.\n\nQuestion: What state are the doors in after the last\npass? Which are open, which are closed?\n\n[Source http://rosettacode.org]","OneHundredDoorsTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class OneHundredDoorsTest {\n\n    @Test\n    public void if_there_is_only_1_door_to_pass_the_state_of_door_should_be_OPEN() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertArrayEquals(new DS[]{DS.OPEN}, oneHundredDoors.doorStatesAfterPassingDoors(1));\n    }\n\n    @Test\n    public void if_there_are_2_doors_to_pass_the_state_of_doors_should_be_OPEN_CLOSED() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertArrayEquals(new DS[]{DS.OPEN, DS.C}, oneHundredDoors.doorStatesAfterPassingDoors(2));\n    }\n\n    @Test\n    public void if_there_are_3_doors_to_pass_the_state_of_doors_should_be_OPEN_CLOSED_CLOSED() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertArrayEquals(new DS[]{DS.OPEN, DS.C, DS.C}, oneHundredDoors.doorStatesAfterPassingDoors(3));\n    }\n\n    // TODO: if_there_are_100_doors_to_pass_the_state_of_doors_should_be_all_right\n\n}\n","OneHundredDoors.java":"import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class OneHundredDoors {\n\n    public DS[] doorStatesAfterPassingDoors(int amountOfDoorsPassed) {\n        List<DS> doorStates = new ArrayList<DS>(Arrays.asList(\n                DS.C, \n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C\n            ));\n\n        if (amountOfDoorsPassed == 1) {\n            doorStates.set(1, DS.OPEN);\n\n            List<DS> result = doorStates.subList(1, 2);\n            return result.toArray(new DS[result.size()]);\n        }\n\n        if (amountOfDoorsPassed == 2) {\n            doorStates.set(1, DS.OPEN);\n            doorStates.set(2, DS.C);\n\n            List<DS> result = doorStates.subList(1, 3);\n            return result.toArray(new DS[result.size()]);\n        }\n        \n        doorStates.set(1, DS.OPEN);\n        doorStates.set(2, DS.C);\n        doorStates.set(3, DS.C);\n\n        List<DS> result = doorStates.subList(1, 4);\n        return result.toArray(new DS[result.size()]);\n    }\n}\n","DS.java":"public enum DS { OPEN, C } // DS: DoorState, C: CLOSED\n"}