{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n...E.\nTime: 0.042\nThere was 1 failure:\n1) if_there_are_100_doors_to_pass_the_state_of_doors_should_be_all_right(OneHundredDoorsTest)\narrays first differed at element [24]; expected:<C> but was:<OPEN>\n\tat org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:52)\n\tat org.junit.Assert.internalArrayEquals(Assert.java:415)\n\tat org.junit.Assert.assertArrayEquals(Assert.java:167)\n\tat org.junit.Assert.assertArrayEquals(Assert.java:184)\n\tat OneHundredDoorsTest.if_there_are_100_doors_to_pass_the_state_of_doors_should_be_all_right(OneHundredDoorsTest.java:43)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:269)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:151)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:130)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:111)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:92)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:47)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:38)\n\nFAILURES!!!\nTests run: 4,  Failures: 1\n\n","instructions":"100 doors in a row are all initially closed. You make\n100 passes by the doors. The first time through, you\nvisit every door and toggle the door (if the door is\nclosed, you open it; if it is open, you close it).\nThe second time you only visit every 2nd door (door\n#2, #4, #6, ...). The third time, every 3rd door\n(door #3, #6, #9, ...), etc, until you only visit\nthe 100th door.\n\nQuestion: What state are the doors in after the last\npass? Which are open, which are closed?\n\n[Source http://rosettacode.org]","OneHundredDoorsTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class OneHundredDoorsTest {\n\n    @Test\n    public void if_there_is_only_1_door_to_pass_the_state_of_door_should_be_OPEN() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertArrayEquals(new DS[]{DS.OPEN}, oneHundredDoors.doorStatesAfterPassingDoors(1));\n    }\n\n    @Test\n    public void if_there_are_2_doors_to_pass_the_state_of_doors_should_be_OPEN_CLOSED() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertArrayEquals(new DS[]{DS.OPEN, DS.C}, oneHundredDoors.doorStatesAfterPassingDoors(2));\n    }\n\n    @Test\n    public void if_there_are_3_doors_to_pass_the_state_of_doors_should_be_OPEN_CLOSED_CLOSED() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertArrayEquals(new DS[]{DS.OPEN, DS.C, DS.C}, oneHundredDoors.doorStatesAfterPassingDoors(3));\n    }\n\n    @Test\n    public void if_there_are_100_doors_to_pass_the_state_of_doors_should_be_all_right() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertArrayEquals(\n            new DS[]{\n                DS.OPEN, DS.C, DS.C, DS.OPEN, DS.C,        DS.C, DS.C, DS.C, DS.OPEN, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,        DS.OPEN, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,        DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,        DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,        DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,        DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,        DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,        DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,        DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,        DS.C, DS.C, DS.C, DS.C, DS.C\n            }, oneHundredDoors.doorStatesAfterPassingDoors(100));\n    }\n\n}\n","OneHundredDoors.java":"import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class OneHundredDoors {\n\n    public DS[] doorStatesAfterPassingDoors(int amountOfDoorsPassed) {\n        List<DS> doorStates = new ArrayList<DS>(Arrays.asList(\n                DS.C, \n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C,\n                DS.C, DS.C, DS.C, DS.C, DS.C,         DS.C, DS.C, DS.C, DS.C, DS.C\n            ));\n\n        for (int pass = 1; pass <= amountOfDoorsPassed; pass++) {\n            for (int door = 1; door <= amountOfDoorsPassed; door++) {\n                if (door % pass == 0) {\n                    if (DS.C.equals(doorStates.get(door))) {\n                        doorStates.set(door, DS.OPEN);\n                    } else if (DS.OPEN.equals(doorStates.get(door))) {\n                        doorStates.set(door, DS.C);\n                    }\n                }\n            }\n        }\n\n        List<DS> result = doorStates.subList(1, amountOfDoorsPassed + 1);\n        return result.toArray(new DS[amountOfDoorsPassed]);\n    }\n}\n","DS.java":"public enum DS { OPEN, C } // DS: DoorState, C: CLOSED\n"}